@Library('my-shared-library') _
node ('master'){
    stage ('Test') {
    parallel (
        'agent-32bit': {
            node ('centos') {
                stage('Checkout repository x32') {
                    checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/uladzimiramelyanovich/curl.git']]]
                }
                stage('Build x32') {
                    script {
                        parallelScript.linux("platform" : "x86")
                    }
                }    
                try {
                    stage('Build and execute Unit Tests x32') {
                        sh "cd ./tests"
                        sh "make test"
                    }
                } finally {
                    archiveArtifacts artifacts: '**/*.lo,**/*.o,**/curl', fingerprint: true
                    //archiveArtifacts artifacts: '**/*.o', fingerprint: true
                    //archiveArtifacts artifacts: '**/curl', fingerprint: true
                }
                stage('SonarQube analysis x32') {
                    // requires SonarQube Scanner 2.8+
                    def scannerHome = tool 'Sonarqube Scanner 3.3.0.1492';
                    withSonarQubeEnv('sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectName=curl -Dsonar.projectVersion=1.0 -Dsonar.projectKey=curl-x32:app -Dsonar.scm.provider=git -Dsonar.sources=. -Dsonar.cxx.includeDirectories=./,include/curl/"	 
                    }
                    sleep(30)
                }
                stage('Quality Gate x32') {
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
                stage('Atrifactory x32') {
                    def server = Artifactory.server 'artifactory'
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "*.txt",
                                "target": "example-repo-local/files/"
                            }
                        ]
                    }"""
                    server.upload spec: uploadSpec, failNoOp: true
                } 
            } 
        },
        'agent-64bit': {
            node ('centos') {
                stage('Checkout repository x64') {
                    checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/uladzimiramelyanovich/curl.git']]]
                }
                stage('Build x64') {
                    script {
                        parallelScript.linux("platform" : "x86_64")
                    }
                }    
                try {
                    stage('Build and execute Unit Tests x64') {
                        sh "cd ./tests"
                        sh "make test"
                    }
                } finally {
                    archiveArtifacts artifacts: '**/*.lo,**/*.o,**/curl', fingerprint: true
                    //archiveArtifacts artifacts: '**/*.o', fingerprint: true
                    //archiveArtifacts artifacts: '**/curl', fingerprint: true
                }
                stage('SonarQube analysis x64') {
                    // requires SonarQube Scanner 2.8+
                    def scannerHome = tool 'Sonarqube Scanner 3.3.0.1492';
                    withSonarQubeEnv('sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectName=curl -Dsonar.projectVersion=1.0 -Dsonar.projectKey=curl-x64:app -Dsonar.scm.provider=git -Dsonar.sources=. -Dsonar.cxx.includeDirectories=./,include/curl/"	 
                    }
                    sleep(30)
                }
                stage('Quality Gate x64') {
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
                stage('Atrifactory x64') {
                    def server = Artifactory.server 'artifactory'
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "*.txt",
                                "target": "example-repo-local/files/"
                            }
                        ]
                    }"""
                    server.upload spec: uploadSpec, failNoOp: true
                } 
            } 
        },        
        'windows': {
            node (windows') {
                stage('Checkout repository Windows x64') {
                    checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/uladzimiramelyanovich/curl.git']]]
                }
                try stage('Build Windows x64') {
                    script {
                        parallelScript.windows("platform" : "x86_64")
                    }
                } finally {
                    archiveArtifacts artifacts: '**/*.lo,**/*.o,**/curl', fingerprint: true
                    //archiveArtifacts artifacts: '**/*.o', fingerprint: true
                    //archiveArtifacts artifacts: '**/curl', fingerprint: true
                }    
            }    
        }
       
    )
    }
}	
  

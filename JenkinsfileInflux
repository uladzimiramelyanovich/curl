node ('master'){

    deleteDir()
    def stage_name
    def stage_id
    def stage_error = 'no errors'
    try {
        stage('Checkout repository.') {
            stage_id = 1
            stage_name = env.STAGE_NAME
            checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/uladzimiramelyanovich1/curl.git']]]
        }
    }   catch (err) {
            println ('Start')
            println (err)
            stage_error = err.toString()
            println ('Next')
            println (stage_error)
            println ('Last')
            println (stage_error.replaceALL('\\:','!'))
            currentBuild.result = "FAILURE"
        }
        finally {
            println(currentBuild.currentResult + ' ' + stage_name)
            def myData = [:]
            def myDataTags = [:]
            myData['stage_result'] = currentBuild.currentResult
            myData['stage_error'] = stage_error
            stage_error = 'no errors'
            myData['stage_successfull'] = 'true'
            myData['stage_id'] = stage_id            
            myDataTags['stage_name'] = stage_name
            myDataTags['build_id'] = env.BUILD_ID
            try {
                influxDbPublisher (
                    target: 'Jenkins',
                    customData: myData,
                    customDataTags: myDataTags
                )
            } catch(all) {
                println('Influxdb exception. ' + all)
            }
        }
                
    try {
        stage('Sonarqube analysis.') {
            stage_id = 2        
            stage_name = env.STAGE_NAME
            // requires Sonarqube Scanner 2.8+
            def scannerHome = tool 'Sonarqube Scanner 3.3.0.1492';
            withSonarQubeEnv('sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=sonarqube/sonar-curl-project.properties"
            }
        }            

    }   finally {
            println(currentBuild.currentResult + ' ' + stage_name)    
            def mySonarData = [:]
            def mySonarDataTags = [:]
            mySonarData['stage_result'] = 'SUCCESS'
            mySonarData['stage_successfull'] = 'true'
            mySonarData['stage_id'] = stage_id            
            mySonarDataTags['stage_name'] = stage_name
            mySonarDataTags['build_id'] = env.BUILD_ID
            try {            
                influxDbPublisher (
                    target: 'Jenkins',
                    customData: mySonarData,
                    customDataTags: mySonarDataTags
                )
            } catch(all) {
              println('Influxdb exception. ' + all)
            }                
        } 
       
}
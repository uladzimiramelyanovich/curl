node ('master'){
    deleteDir()
    def current_stage
    try {
        stage('Checkout repository.') {
            current_stage = env.STAGE_NAME
            checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/uladzimiramelyanovich/curl.git']]]
        }
    }   finally {
            def myData = [:]
            def myDataTags = [:]
            myData['stage_result'] = 'SUCCESS'
            myData['stage_successfull'] = 'true'
            myDataTags['stage_name'] = current_stage
            influxDbPublisher (
                target: 'Jenkins',
                customData: myData,
                customDataTags: myDataTags
            )
        }
    try {
        stage('Sonarqube analysis.') {
            current_stage = env.STAGE_NAME
            // requires Sonarqube Scanner 2.8+
            def scannerHome = tool 'Sonarqube Scanner 3.3.0.1492';
            withSonarQubeEnv('sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=sonarqube/sonar-curl-project.properties"
            }
        }            

    }   finally {
            def mySonarData = [:]
            def mySonarDataTags = [:]
            mySonarData['stage_result'] = 'SUCCESS'
            mySonarData['stage_successfull'] = 'true'
            mySonarDataTags['stage_name'] = current_stage
            influxDbPublisher (
                target: 'Jenkins',
                customData: mySonarData,
                customDataTags: mySonarDataTags
            )
        }    
}